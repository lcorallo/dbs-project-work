DROP TABLE COMPANY;
/
DROP TABLE OPERATIONAL_CENTER;
/
DROP TYPE COMPANY_TY FORCE;
/
DROP TYPE SERVICE_TY FORCE;
/
DROP TYPE SERVICES_TY FORCE;
/
DROP TYPE OPERATIONAL_CENTER_TY FORCE;
/
DROP INDEX IDX_TEAM;
/
DROP TABLE TEAM;
/
DROP TYPE TEAM_TY FORCE;
/
DROP TYPE MEMBER_TY FORCE;
/
DROP TYPE MEMBERS_TY FORCE;
/
DROP TABLE ACCOUNT;
/
DROP TABLE CUSTOMER;
/
DROP TYPE CUSTOMER_TY FORCE;
/
DROP TYPE BUSINESS_TY FORCE;
/
DROP TYPE INDIVIDUAL_TY FORCE;
/
DROP TYPE PERSON_TY FORCE;
/
DROP TYPE ACCOUNT_TY FORCE;
/
DROP TYPE ADDRESS_TY FORCE;
/
DROP TABLE OPERATION_ORDER;
/
DROP TYPE ORDER_TY FORCE;
/
DROP TYPE DELIVERY_TY FORCE;
/
DROP CLUSTER TEAM_HASH_CLUSTER;
/
CREATE OR REPLACE TYPE SERVICE_TY AS OBJECT (
    code INTEGER,
    name VARCHAR2(50),
    description VARCHAR2(200)
);
/
CREATE OR REPLACE TYPE SERVICES_TY AS TABLE OF SERVICE_TY;
/
CREATE OR REPLACE TYPE COMPANY_TY AS OBJECT (
    name VARCHAR(30),
    services SERVICES_TY
);
/
CREATE TABLE COMPANY OF COMPANY_TY (
  CONSTRAINT COMPANY_PK PRIMARY KEY (name) ENABLE 
) NESTED TABLE services STORE as services_TAB;
/
CREATE OR REPLACE TYPE ADDRESS_TY AS OBJECT (
    street VARCHAR2(50),
    city VARCHAR2(10),
    province VARCHAR2(5),
    zipcode VARCHAR2(5)
);
/
CREATE OR REPLACE TYPE OPERATIONAL_CENTER_TY AS OBJECT (
    code INTEGER,
    name VARCHAR2(20),
    address ADDRESS_TY,
    companyRef REF COMPANY_TY
);
/
CREATE TABLE OPERATIONAL_CENTER OF OPERATIONAL_CENTER_TY (
    SCOPE FOR (companyRef) IS COMPANY,
    CONSTRAINT OPERATIONAL_CENTER_PK PRIMARY KEY (code) ENABLE 
);
/
CREATE OR REPLACE TYPE PERSON_TY AS OBJECT (
    name VARCHAR2(20),
    surname VARCHAR2(20)
)
NOT INSTANTIABLE
NOT FINAL;
/
CREATE OR REPLACE TYPE MEMBER_TY UNDER PERSON_TY (
    CF CHAR(16)
);
/
CREATE OR REPLACE TYPE MEMBERS_TY AS VARRAY(8) OF MEMBER_TY;
/
CREATE OR REPLACE TYPE TEAM_TY AS OBJECT (
    code INTEGER,
    name VARCHAR2(20),
    noOperations INTEGER,
    score INTEGER,
    members MEMBERS_TY,
    centerRef REF OPERATIONAL_CENTER_TY
);
/
CREATE CLUSTER TEAM_HASH_CLUSTER ( 
    CODE INTEGER 
) 
HASHKEYS 200
SIZE 212; 
/

CREATE TABLE TEAM OF TEAM_TY (
  SCOPE FOR (centerRef) IS OPERATIONAL_CENTER,
  CONSTRAINT TEAM_PK PRIMARY KEY (code) ENABLE
)
CLUSTER TEAM_HASH_CLUSTER (CODE);
/
CREATE OR REPLACE TYPE CUSTOMER_TY UNDER PERSON_TY (
    code INTEGER,
    email VARCHAR2(50),
    type VARCHAR2(20)
)
NOT FINAL;
/
CREATE OR REPLACE TYPE BUSINESS_TY UNDER CUSTOMER_TY();
/
CREATE OR REPLACE TYPE INDIVIDUAL_TY UNDER CUSTOMER_TY();
/
CREATE TABLE CUSTOMER OF CUSTOMER_TY (
    CHECK (type IN ('Individual', 'Business')),
    CONSTRAINT CUSTOMER_PK PRIMARY KEY (code) ENABLE
);
/
CREATE OR REPLACE TYPE ACCOUNT_TY AS OBJECT (
    code INTEGER,
    customerRef REF CUSTOMER_TY
);
/
CREATE TABLE ACCOUNT OF ACCOUNT_TY (
    SCOPE FOR (customerRef) IS CUSTOMER,
    CONSTRAINT ACCOUNT_PK PRIMARY KEY (code) ENABLE
);
/
CREATE OR REPLACE TYPE DELIVERY_TY AS OBJECT (
    customerFeedback VARCHAR2(200),
    deliveryTime INTERVAL DAY TO SECOND
);
/
CREATE OR REPLACE TYPE ORDER_TY AS OBJECT (
    code INTEGER,
    type VARCHAR2(10),
    creation_date DATE,
    cost NUMBER(15, 2),
    placementBy VARCHAR2(10),
    teamRef REF TEAM_TY,
    accountRef REF ACCOUNT_TY,
    delivery DELIVERY_TY
);
/
CREATE TABLE OPERATION_ORDER OF ORDER_TY (
    SCOPE FOR (teamRef) IS TEAM,
    SCOPE FOR (accountRef) IS ACCOUNT,
    CHECK (type IN ('BULK', 'URGENT', 'REGULAR')),
    CHECK (placementBy IN ('PHONE', 'EMAIL', 'PLATFORM')),
    CONSTRAINT OPERATION_ORDER_PK PRIMARY KEY (code) ENABLE 
);
/
CREATE OR REPLACE PROCEDURE IncrementOperationsCount (incomingCode IN INTEGER)
IS
BEGIN
    UPDATE TEAM
    SET noOperations = noOperations + 1
    WHERE code = incomingCode;
END IncrementOperationsCount;
/
CREATE OR REPLACE PROCEDURE DecrementOperationsCount (incomingCode IN INTEGER)
IS
BEGIN
    UPDATE TEAM
    SET noOperations = noOperations - 1
    WHERE code = incomingCode;
END DecrementOperationsCount;
/

CREATE OR REPLACE TRIGGER SYNC_TEAM_OPS
AFTER INSERT OR DELETE OR UPDATE OF teamRef ON OPERATION_ORDER
FOR EACH ROW
BEGIN
    DECLARE
        new_team_code INTEGER;
        old_team_code INTEGER;
    BEGIN
        -- Dereference the teamRef to get the code of the team
        SELECT DEREF(:NEW.teamRef).code
        INTO new_team_code
        FROM dual;
        IncrementOperationsCount(new_team_code);
        
        SELECT DEREF(:OLD.teamRef).code
        INTO old_team_code
        FROM dual;
        DecrementOperationsCount(old_team_code);
    END;
END SYNC_TEAM_OPS;
/


CREATE OR REPLACE PROCEDURE CheckTeamScore (incomingScore IN INTEGER)
IS
BEGIN
    IF incomingScore < 0 OR incomingScore > 100 THEN
        RAISE_APPLICATION_ERROR(-20999, 'A team score must be between 0 and 100');
    END IF;
END CheckTeamScore;
/


CREATE OR REPLACE TRIGGER CHECK_TEAM
BEFORE INSERT OR UPDATE ON TEAM
FOR EACH ROW
BEGIN
    -- Check if the members collection exists and has more than 8 elements
    IF :OLD.noOperations IS NULL THEN
        IF :NEW.noOperations IS NOT NULL AND :NEW.noOperations > 0 THEN
            RAISE_APPLICATION_ERROR(-20999, 'A team must start with 0 operations');
        END IF;

        :NEW.noOperations := 0;
    ELSE
        IF :NEW.noOperations < 0 OR ABS(:NEW.noOperations - :OLD.noOperations) > 1 THEN
            RAISE_APPLICATION_ERROR(-20999, 'A team operations must be greater than 0 and can be incremented only by one each time');
        END IF;
    END IF;


    IF :NEW.score IS NULL THEN
        :NEW.score := 0;
    ELSE 
        CheckTeamScore(:NEW.score);
    END IF;

END CHECK_TEAM;
/
CREATE INDEX IDX_TEAM ON TEAM (score);
/